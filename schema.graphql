# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @extends on INTERFACE | OBJECT

directive @external on FIELD_DEFINITION | OBJECT

directive @inaccessible on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | UNION

directive @key(fields: String!, resolvable: Boolean = true) repeatable on INTERFACE | OBJECT

directive @link(import: [link__Import], url: String!) on SCHEMA

directive @override(from: String!) on FIELD_DEFINITION

directive @provides(fields: String!) on FIELD_DEFINITION

directive @requires(fields: String!) on FIELD_DEFINITION

directive @shareable on FIELD_DEFINITION | OBJECT

directive @tag(name: String!) repeatable on ARGUMENT_DEFINITION | ENUM | ENUM_VALUE | FIELD_DEFINITION | INPUT_FIELD_DEFINITION | INPUT_OBJECT | INTERFACE | OBJECT | SCALAR | SCHEMA | UNION

input CreatePaymentInput {
  amount: Float!
  currency: String!
  description: String
  fees: Float
  gateway: String
  method: String!
  orderId: String
  receipt: String
  refundStatus: String
  status: String!
  time: DateTime!
  transactionId: String
  type: String!
  userId: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Mutation {
  createPayment(data: CreatePaymentInput!): Payment!
  deletePayment(where: PaymentWhereUniqueInput!): Payment!
  updateUser(data: PaymentUpdateInput!, where: PaymentWhereUniqueInput!): Payment!
}

type Payment {
  amount: Float!
  createdAt: DateTime!
  currency: String!
  description: String
  fees: Float
  gateway: String
  id: ID!
  method: String!
  orderId: String
  receipt: String
  refundStatus: String
  status: String!
  time: DateTime!
  transactionId: String
  type: String!
  updatedAt: DateTime!
  userId: String!
}

input PaymentUpdateInput {
  amount: Float
  currency: String
  description: String
  fees: Float
  gateway: String
  method: String
  orderId: String
  receipt: String
  refundStatus: String
  status: String
  time: DateTime
  transactionId: String
  type: String
  userId: String
}

input PaymentWhereUniqueInput {
  id: String!
}

type Query {
  getPayment(where: PaymentWhereUniqueInput!): Payment!
}

scalar link__Import